#!/data/data/com.termux/files/usr/bin/bash

#title:         tudo_tests
#description:   a script to run automated tests for the tudo command types
#author:        agnostic-apollo
#usage:         run "tudo_tests --help" for detailed list of usages
#date:          14-Dec-2020
#bash version:  4.1 or higher
#credits:       



TUDO_TESTS_HELP="$(cat<<'TUDO_TESTS_HELP_EOF'
tudo_tests is a script that run tests for the tudo script.


Usage:
  tudo_tests [command_options]
  tudo_tests [command_options] <su|asu|path|script>
  tudo_tests [command_options] <su|asu|path|script> <shell> <test_number>


Available command_options:
  [ -h | --help ]    display this help screen
  [ -v | -vv ]       set verbose level to 1 or 2
  [ --help-extra ]   display more help about how tudo_tests command works


Enabling verbose mode will fail test validation for tests that match
the output, its mainly for debugging.
TUDO_TESTS_HELP_EOF
)"

TUDO_TESTS_HELP_EXTRA="$(cat<<'TUDO_TESTS_HELP_EXTRA'


### Install and Usage Instructions For Termux In Android:

#Install tudo and tudo_tests scripts and set ownership and executable permission
curl -L 'https://github.com/agnostic-apollo/tudo/raw/master/tudo' -o "/data/data/com.termux/files/usr/bin/tudo"
curl -L 'https://github.com/agnostic-apollo/tudo/raw/master/tests/tudo_tests' -o ~/tudo_tests
or
cat "/storage/emulated/0/Download/tudo" > "/data/data/com.termux/files/usr/bin/tudo"
cat "/storage/emulated/0/Download/tudo_tests" > ~/tudo_tests

export termux_bin_path="/data/data/com.termux/files/usr/bin"; export owner="$(stat -c "%u" "$termux_bin_path")"; chown "$owner:$owner" "$termux_bin_path/tudo" && chmod 700 "$termux_bin_path/tudo"; chown "$owner:$owner" ~/tudo_tests && chmod 700 ~/tudo_tests;


#Install shells used by tudo_tests script
pkg install bash zsh dash fish python ruby nodejs perl lua52 lua53 lua54 php rlwrap


#Install termux_tasker_basic_bash_test and termux_tasker_basic_python_test script and set permissions
mkdir -p /data/data/com.termux/files/home/.termux/tasker
chmod 700 -R /data/data/com.termux/files/home/.termux

curl -L 'https://github.com/termux/termux-tasker/raw/master/templates/scripts/termux_tasker_basic_bash_test' -o "/data/data/com.termux/files/home/.termux/tasker/termux_tasker_basic_bash_test"
curl -L 'https://github.com/termux/termux-tasker/raw/master/templates/scripts/termux_tasker_basic_python_test' -o "/data/data/com.termux/files/home/.termux/tasker/termux_tasker_basic_python_test"
or
cat "/storage/emulated/0/Download/termux_tasker_basic_bash_test" > "/data/data/com.termux/files/home/.termux/tasker/termux_tasker_basic_bash_test"
cat "/storage/emulated/0/Download/termux_tasker_basic_python_test" > "/data/data/com.termux/files/home/.termux/tasker/termux_tasker_basic_python_test"

chmod 700 "/data/data/com.termux/files/home/.termux/tasker/termux_tasker_basic_bash_test"
chmod 700 "/data/data/com.termux/files/home/.termux/tasker/termux_tasker_basic_python_test"


#Install youtube-dl

apt install curl ffmpeg python
curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /data/data/com.termux/files/usr/bin/youtube-dl
chmod 700 /data/data/com.termux/files/usr/bin/youtube-dl

#Fix shebang, must be run on install and on each update
#otherwise will get "bad interpreter: /usr/bin/env" errors when running with root shell, plugin or TermuxCommand,
#because termux-exec doesn't work for those cases and LD_PRELOAD isn't set
#but its not required for usage with tudo since it sets the LD_PRELOAD
termux-fix-shebang /data/data/com.termux/files/usr/bin/youtube-dl
#
#Update youtube-dl
youtube-dl -U


#Install bandcamp-dl
pip3 install bandcamp-downloader
#
#Update bandcamp-dl
pkg install git
pip install git+https://github.com/iheanyi/bandcamp-dl --upgrade



#Following are not required for the tests currently

#Install pry, the ruby interactive shell alternative
gem install pry

#Install python2
pkg install python2

#Install ksh
apt install unstable-repo
pkg intsall loksh



#Follow instructions in `RC File Variables` section of README.md to fix `rc` files.

#Finally run tests

#Run all tests
bash ~/tudo_tests

#Run only script command type tests
bash ~/tudo_tests script

#Run only script command type bash shell test 1
bash ~/tudo_tests script bash 1

#Run only script command type bash shell test 1 with verbose level 2
bash ~/tudo_tests -vv script bash 1

#For some tests **sometimes** where *-stdin-string option is used to pass a string to an interactive shell using stdin,
#the stdout may be returned in an unsynchronized manner which fails the validation
#If that happens, just rerun the test and it should ideally work
#This is also the reason why su and asu tests use matches instead of equality checks, some script type tests still use exact matches

TUDO_TESTS_HELP_EXTRA
)"



### Set Default Variables Start
tudo_tests_verbose_level=2 #default to log level 2
tudo_tests_args_verbose_level=0 #set this to 1 manually, if you want to debug arguments received

TUDO_TESTS_TEMP_DIRECTORY_SUFFIX="" #default to none

declare -ga TUDO_TESTS_DIRECTORIES=()
declare -ga tudo_v_args=()

#set regexes for validation
valid_number_regex='^[0-9]+$'
valid_absolute_path_regex='^(/[^/]+)+$'

### Set Default Variables


[[ x"${BASH_SOURCE[0]}" == x"$0" ]] && tudo_tests_exit_command="exit" || tudo_tests_exit_command="return"

function tudo_tests_log () { local log_level="${1}"; shift; if [[ $tudo_tests_verbose_level -ge $log_level ]]; then echo "$@"; fi }
function tudo_tests_log_literal() { local log_level="${1}"; shift; if [[ $tudo_tests_verbose_level -ge $log_level ]]; then echo -e "$@"; fi }
function tudo_tests_log_errors () { echo "$@" 1>&2; }
function tudo_tests_log_args() { if [[ $tudo_tests_args_verbose_level -ge "1" ]]; then echo "$@"; fi }
function tudo_tests_log_arg_errors() { echo "$@" 1>&2; }

#stdin in closed for some tests as a patch to SuperSU automatic redirection of stderr to stdout when running in interactive mode
function close_stdin () {  if [ -t 0 ]; then exec <&-; fi }
function reopen_stdin () {  if [[ "$tty_path" == "/dev/"* ]]; then exec <$tty_path; fi }


tudo_tests_main() {

	local return_value

	#source the tudo script
	if [ ! -x /data/data/com.termux/files/usr/bin/tudo ]; then
		tudo_tests_log_errors "Failed to find \"/data/data/com.termux/files/usr/bin/tudo\""
		$tudo_tests_exit_command 1
	else
		source /data/data/com.termux/files/usr/bin/tudo
		tudo_set_default_variables
	fi

	local -a TUDO_TESTS_REQUIRED_VARIABLES_ARRAY=(
		TERMUX_FILES
		TERMUX_PREFIX
		TERMUX_HOME
		TERMUX_PATH
		TERMUX_LD_LIBRARY_PATH
		ANDROID_PATH
	)

	local var

	for var in "${TUDO_TESTS_REQUIRED_VARIABLES_ARRAY[@]}"; do
		#if var is not set
		if [ -z "${!var}" ]; then
			tudo_tests_log_errors "The required variable \"$var\" for tudo_tests is not set"
			$tudo_tests_exit_command 1
		fi
	done


	#process the command or options passed to tudo_tests
	process_tudo_tests_parameters "$@"


	tudo_tests_run
	$tudo_tests_exit_command $?

}

tudo_tests_run() {

	local return_value

	#set TUDO_TESTS_WORKING_DIR to use for tests
	TUDO_TESTS_WORKING_DIR="$TERMUX_HOME"

	cd "$TUDO_TESTS_WORKING_DIR"

	if [ -t 0 ]; then
		tty_path="$(tty 2>/dev/null)"
	fi

	#find machine arch
	ARCH="$(uname -m)"
	return_value=$?
	if [ $return_value -ne 0 ]; then
		tudo_tests_log_errors "Failed to find machine arch"
		return $return_value
	fi

	#find android sdk/os version
	ANDROID_SDK_VERSION="$(getprop "ro.build.version.sdk")"
	return_value=$?
	if [ $return_value -ne 0 ] || [[ ! "$ANDROID_SDK_VERSION" =~ $valid_number_regex ]]; then
		tudo_tests_log_errors "Failure while finding \"ro.build.version.sdk\" property"
		tudo_tests_log_errors "ANDROID_SDK_VERSION = \"$ANDROID_SDK_VERSION\""
		if [ $return_value -eq 0 ]; then
			return_value=1
		fi
		return $return_value
	fi



	#generate unique suffix to use for tudo_tests directories
	TUDO_TESTS_TEMP_DIRECTORY_SUFFIX="$(mktemp -d --dry-run tudo.XXXXXX)"
	return_value=$?
	if [ $return_value -ne 0 ] || [[ ! "$TUDO_TESTS_TEMP_DIRECTORY_SUFFIX" =~  ^tudo\.......$ ]]; then
		tudo_tests_log_errors "Failure while running mktemp to create TUDO_TESTS_TEMP_DIRECTORY_SUFFIX"
		tudo_tests_log_errors "TUDO_TESTS_TEMP_DIRECTORY_SUFFIX=\"$TUDO_TESTS_TEMP_DIRECTORY_SUFFIX\""
		if [ $return_value -eq 0 ]; then
			return_value=1
		fi
		return $return_value
	fi

	export TUDO_SHELL_HOME="$TUDO_TESTS_WORKING_DIR/.shell_home.$TUDO_TESTS_TEMP_DIRECTORY_SUFFIX"
	export TUDO_POST_SHELL_HOME="$TUDO_TESTS_WORKING_DIR/.post_shell_home.$TUDO_TESTS_TEMP_DIRECTORY_SUFFIX"

	TUDO_SHELL_HOME_BASENAME="${TUDO_SHELL_HOME##*/}" #strip longest match of */ from start
	TUDO_POST_SHELL_HOME_BASENAME="${TUDO_POST_SHELL_HOME##*/}" #strip longest match of */ from start

	TUDO_TESTS_DIRECTORIES+=("$TUDO_SHELL_HOME")
	TUDO_TESTS_DIRECTORIES+=("$TUDO_POST_SHELL_HOME")



	#set traps to run commands before exiting tudo_tests
	trap 'tudo_tests_cleanup' EXIT
	trap 'tudo_tests_cleanup TERM' TERM
	trap 'tudo_tests_cleanup INT' INT
	trap 'tudo_tests_cleanup HUP' HUP
	trap 'tudo_tests_cleanup QUIT' QUIT



	#run tests
	if [ -z "$tudo_tests_command_type" ]; then
		tudo_tests_log 0 "Running 'tudo' tests"
		tudo_tests_log 0 $'\n\n'; tudo_tests_run_su_tests ||  return $?
		tudo_tests_log 0 $'\n\n'; tudo_tests_run_asu_tests ||  return $?
		tudo_tests_log 0 $'\n\n'; tudo_tests_run_path_tests ||  return $?
		tudo_tests_log 0 $'\n\n'; tudo_tests_run_script_tests ||  return $?
	elif [[ "$tudo_tests_command_type" != *,* ]] && [[ ",su,asu,path,script," == *",$tudo_tests_command_type,"* ]]; then
		tudo_tests_run_"$tudo_tests_command_type"_tests ||  return $?
	else
		tudo_tests_log_errors "Unknown tests command type $tudo_tests_command_type"
		show_tudo_tests_help
		return 1
	fi

	tudo_tests_log 0 $'\n\n'"All 'tudo' tests successful"

	return 0

}

tudo_tests_run_su_tests() {

	local return_value

	tudo_tests_command_type="su"
	tudo_tests_log 0 "Running '$tudo_tests_command_type' command type tests"



	#Run bash tests

	set_tudo_tests_current_test_shell "bash"
	shell="bash"

	run_tudo_test 1 && \
	output="$(tudo "${tudo_v_args[@]}" --dry-run --shell-stdin-string='cd "$HOME"; pwd; exit;' su)"
	validate_tudo_test 0 $? "$output" ""

	run_tudo_test 2 && \
	output="$(tudo "${tudo_v_args[@]}" --shell-stdin-string='cd "$HOME"; pwd; exit;' su)"
	validate_tudo_test 0 $? "$output" "*" "$TUDO_SHELL_HOME" "*"

	run_tudo_test 3 && \
	output="$(tudo "${tudo_v_args[@]}" --shell-stdin-string='echo "$PATH"; exit;' su)"
	validate_tudo_test 0 $? "$output" "*" "$TERMUX_PATH" "*"

	run_tudo_test 4 && \
	output="$(tudo "${tudo_v_args[@]}" --shell-stdin-string='echo "$LD_LIBRARY_PATH"; exit;' su)"
	validate_tudo_test 0 $? "$output" "*" "$TERMUX_LD_LIBRARY_PATH" "*"



	tudo_tests_log 0 $'\n\n'"All 'su' command type tests successful"

	return 0

}

tudo_tests_run_asu_tests() {

	local return_value

	tudo_tests_command_type="asu"
	tudo_tests_log 0 "Running '$tudo_tests_command_type' command type tests"



	#Run bash tests

	set_tudo_tests_current_test_shell "bash"
	shell="bash"

	run_tudo_test 1 && \
	output="$(tudo "${tudo_v_args[@]}" --dry-run --shell-stdin-string='cd "$HOME"; pwd; exit;' asu)"
	validate_tudo_test 0 $? "$output" ""

	run_tudo_test 2 && \
	output="$(tudo "${tudo_v_args[@]}" --shell-stdin-string='cd "$HOME"; pwd; exit;' asu)"
	validate_tudo_test 0 $? "$output" "*" "$TUDO_SHELL_HOME" "*"

	run_tudo_test 3 && \
	output="$(tudo "${tudo_v_args[@]}" --shell-stdin-string='echo "$PATH"; exit;' asu)"
	validate_tudo_test 0 $? "$output" "*" "$ANDROID_PATH" "*"

	run_tudo_test 4 && \
	output="$(tudo "${tudo_v_args[@]}" --shell-stdin-string='echo "$LD_LIBRARY_PATH"; exit;' asu)"
	return_value=$?
	#if ARCH is 64 bit
	if [[ "$ARCH" == *64 ]]; then
		validate_tudo_test 0 $return_value "$output" "*" "/system/lib64:/system/lib:" "*"
	else
		validate_tudo_test 0 $return_value "$output" "*" "/system/lib:" "*"
	fi



	tudo_tests_log 0 $'\n\n'"All 'asu' command type tests successful"

	return 0
}

tudo_tests_run_path_tests() {

	local return_value

	tudo_tests_command_type="path"
	tudo_tests_log 0 "Running '$tudo_tests_command_type' command type tests"



	#Run bash tests

	set_tudo_tests_current_test_shell "bash"
	shell="bash"

	if [ -x "$TERMUX_HOME/.termux/tasker/termux_tasker_basic_bash_test" ]; then
		run_tudo_test 1 && \
		output="$(tudo "${tudo_v_args[@]}" "$TERMUX_HOME/.termux/tasker/termux_tasker_basic_bash_test" "$shell" "shell")"
		validate_tudo_test 0 $? "$output" "\$1=\`$shell\`"$'\n'"\$2=\`shell\`"
	else
		skip_tudo_test 1
	fi

	if [ -x "$TERMUX_HOME/.termux/tasker/termux_tasker_basic_bash_test" ]; then
		run_tudo_test 2 && \
		output="$(tudo "${tudo_v_args[@]}" '~/.termux/tasker/termux_tasker_basic_bash_test' "$shell" "shell")"
		validate_tudo_test 0 $? "$output" "\$1=\`$shell\`"$'\n'"\$2=\`shell\`"
	else
		skip_tudo_test 2
	fi

	if [ -x "$TERMUX_HOME/.termux/tasker/termux_tasker_basic_bash_test" ]; then
		run_tudo_test 3 && \
		output="$(cd "$TERMUX_HOME"; tudo "${tudo_v_args[@]}" './.termux/tasker/termux_tasker_basic_bash_test' "$shell" "shell")"
		validate_tudo_test 0 $? "$output" "\$1=\`$shell\`"$'\n'"\$2=\`shell\`"
	else
		skip_tudo_test 3
	fi

	if [ -x "$TERMUX_HOME/.termux/tasker/termux_tasker_basic_bash_test" ]; then
		run_tudo_test 4 && \
		output="$(cd "$TERMUX_HOME/.termux/tasker"; tudo "${tudo_v_args[@]}" 'termux_tasker_basic_bash_test' "$shell" "shell")"
		validate_tudo_test 0 $? "$output" "\$1=\`$shell\`"$'\n'"\$2=\`shell\`"
	else
		skip_tudo_test 4
	fi



	run_tudo_test 5 && \
	output="$(tudo "${tudo_v_args[@]}" ps -e -o cmd | grep "$TERMUX_PREFIX/bin/ps")"
	validate_tudo_test 0 $? "$output" "*" "$TERMUX_PREFIX/bin/ps -e -o cmd" "*"



	run_tudo_test 6 && \
	output="$(tudo "${tudo_v_args[@]}" getprop "ro.build.version.sdk")"
	validate_tudo_test 0 $? "$output" "$ANDROID_SDK_VERSION"



	run_tudo_test 7 && \
	output="$(tudo "${tudo_v_args[@]}" -r echo "$COMMA_ALTERNATIVE")"
	validate_tudo_test 0 $? "$output" ","



	tudo_tests_log 0 $'\n\n'"All 'path' command type tests successful"

	return 0

}

tudo_tests_run_script_tests() {

	local return_value

	tudo_tests_command_type="script"
	tudo_tests_log 0 "Running '$tudo_tests_command_type' command type tests"



	### Run bash tests

	set_tudo_tests_current_test_shell "bash"
	shell="bash"


	run_tudo_test 1 && \
	output="$(tudo "${tudo_v_args[@]}" -s --dry-run 'cd "$HOME"; pwd;')"
	validate_tudo_test 0 $? "$output" ""

	run_tudo_test 2 && \
	output="$(tudo "${tudo_v_args[@]}" -s 'cd "$HOME"; pwd;')"
	validate_tudo_test 0 $? "$output" "$TUDO_SHELL_HOME"

	run_tudo_test 3 && \
	output="$(cd "$TUDO_TESTS_WORKING_DIR"; tudo "${tudo_v_args[@]}" -s --shell-home="./$TUDO_SHELL_HOME_BASENAME" 'cd "$HOME"; pwd;')"
	validate_tudo_test 0 $? "$output" "$TUDO_SHELL_HOME"

	run_tudo_test 4 && \
	output="$(cd "$TUDO_TESTS_WORKING_DIR"; tudo "${tudo_v_args[@]}" -s --shell-home="$TUDO_SHELL_HOME_BASENAME" 'cd "$HOME"; pwd;')"
	validate_tudo_test 0 $? "$output" "$TUDO_SHELL_HOME"

	run_tudo_test 5 && \
	output="$(tudo "${tudo_v_args[@]}" -si --post-shell-home="$TUDO_POST_SHELL_HOME" --post-shell-stdin-string='exit' --post-shell-pre-commands='cd "$HOME"; pwd;')"
	validate_tudo_test 0 $? "$output" "" "$TUDO_POST_SHELL_HOME" "*"



	run_tudo_test 6 && \
	output="$(tudo "${tudo_v_args[@]}" -s 'readlink -f /proc/$$/exe')"
	validate_tudo_test 0 $? "$output" "$TERMUX_PREFIX/bin/bash"

	run_tudo_test 7 && \
	output="$(tudo "${tudo_v_args[@]}" -s --shell="$TERMUX_PREFIX/bin/bash" 'readlink -f /proc/$$/exe')"
	validate_tudo_test 0 $? "$output" "$TERMUX_PREFIX/bin/bash"

	run_tudo_test 8 && \
	output="$(tudo "${tudo_v_args[@]}" -si --post-shell-stdin-string='readlink -f /proc/$$/exe; exit;')"
	validate_tudo_test 0 $? "$output" "$TERMUX_PREFIX/bin/bash"

	run_tudo_test 9 && \
	output="$(tudo "${tudo_v_args[@]}" -si --post-shell="$TERMUX_PREFIX/bin/bash" --post-shell-stdin-string='readlink -f /proc/$$/exe; exit;')"
	validate_tudo_test 0 $? "$output" "$TERMUX_PREFIX/bin/bash"



	run_tudo_test 10 && \
	output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" <(cat <<'TUDO_EOF'
echo "Hi, $1 $2."
TUDO_EOF
) "$shell" "shell"
	)"
	validate_tudo_test 0 $? "$output" "Hi, $shell shell."



	run_tudo_test 11 && \
	output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" --shell-stdin-string="$shell" '
echo '\''What is your name?'\''
read name
echo "Hi, $name."
'
	)"
	validate_tudo_test 0 $? "$output" "What is your name?"$'\n'"Hi, $shell."



	run_tudo_test 12 && \
	output="$(tudo "${tudo_v_args[@]}" -sd --shell="$shell" '
echo '\''What is your name?'\''
read name
echo "Hi, $name."
'
	)"
	validate_tudo_test 0 $? "$output" "What is your name?"$'\n'"Hi, ."



	run_tudo_test 13 && \
	output="$(tudo "${tudo_v_args[@]}" -so --shell="$shell" --shell-stdin-string="$shell" '
echo '\''What is your name?'\''
read name
echo "Hi, $name." 1>&2
'
	)"
	validate_tudo_test 0 $? "$output" "What is your name?"$'\n'"Hi, $shell."



	run_tudo_test 14 && \
	output="$(tudo "${tudo_v_args[@]}" -sf 'echo "Running $1 $2 script: $(basename "$0")"' "$shell" "shell")"
	validate_tudo_test 0 $? "$output" "Running $shell shell script: tudo_core_script"


	run_tudo_test 15 && \
	output="$(tudo "${tudo_v_args[@]}" -sf --script-name="tudo_core_script_custom" 'echo "Running $1 $2 script: $(basename "$0")"' "$shell" "shell")"
	validate_tudo_test 0 $? "$output" "Running $shell shell script: tudo_core_script_custom"



	if [ -x "$TERMUX_HOME/.termux/tasker/termux_tasker_basic_bash_test" ]; then
		run_tudo_test 16 && \
		output="$(tudo "${tudo_v_args[@]}" -sF '~/.termux/tasker/termux_tasker_basic_bash_test' "$shell" "shell")"
		validate_tudo_test 0 $? "$output" "\$1=\`$shell\`"$'\n'"\$2=\`shell\`"
	else
		skip_tudo_test 16
	fi


	if [ -x "$TERMUX_PREFIX/bin/tasker_config_utils" ]; then
		run_tudo_test 17 && \
		output="$(tudo "${tudo_v_args[@]}" -s --script-name="tasker_config_utils" <(cat "$TERMUX_PREFIX/bin/tasker_config_utils") --help 1>/dev/null)"
		validate_tudo_test 0 $? "$output"
	else
		skip_tudo_test 17
	fi


	if [ -x "$TERMUX_PREFIX/bin/tasker_config_utils" ]; then
		run_tudo_test 18 && \
		output="$(tudo "${tudo_v_args[@]}" -sf --script-name="tasker_config_utils" <(cat "$TERMUX_PREFIX/bin/tasker_config_utils") --help 1>/dev/null)"
		validate_tudo_test 0 $? "$output"
	else
		skip_tudo_test 18
	fi





	run_tudo_test 19 && \
	output="$(tudo "${tudo_v_args[@]}" -s --shell-pre-commands='
export VARIABLE_1="VARIABLE_VALUE_1"
export VARIABLE_2="VARIABLE_VALUE_2"
' '
echo "Hi, $1 $2."
echo "VARIABLE_1=\`$VARIABLE_1\`"
echo "VARIABLE_2=\`$VARIABLE_2\`"
' "$shell" "shell"
	)"
	validate_tudo_test 0 $? "$output" "Hi, $shell shell."$'\n'"VARIABLE_1=\`VARIABLE_VALUE_1\`"$'\n'"VARIABLE_2=\`VARIABLE_VALUE_2\`"



	run_tudo_test 20 && \
	output="$(tudo "${tudo_v_args[@]}" -si --post-shell-stdin-string='exit' --shell-pre-commands='echo "Start script"' --shell-post-commands='echo "Exited script"' --post-shell-pre-commands='echo "Starting interactive shell"' --post-shell-post-commands='echo "Exited interactive shell"' 'echo "Hi, $1 $2."' "$shell" "shell")"
	validate_tudo_test 0 $? "$output" "Start script"$'\n'"Hi, $shell shell."$'\n'"Exited script"$'\n'"Starting interactive shell"$'\n'"Exited interactive shell"





	tudo_test_temp_work_dir="$TUDO_TESTS_WORKING_DIR/work_dir.$TUDO_TESTS_TEMP_DIRECTORY_SUFFIX"
	TUDO_TESTS_DIRECTORIES+=("$tudo_test_temp_work_dir")

	run_tudo_test 21 && \
	output="$(tudo "${tudo_v_args[@]}" -s --work-dir="$tudo_test_temp_work_dir" 'pwd' 2>&1)"
	return_value=$?
	validate_tudo_test 0 $return_value "$output" "$tudo_test_temp_work_dir"

	run_tudo_test 22 && \
	output="$(tudo "${tudo_v_args[@]}" -s --work-dir='~/work_dir.'"$TUDO_TESTS_TEMP_DIRECTORY_SUFFIX" 'pwd' 2>&1)"
	return_value=$?
	validate_tudo_test 0 $return_value "$output" "$tudo_test_temp_work_dir"

	run_tudo_test 23 && \
	output="$(cd "$TUDO_TESTS_WORKING_DIR"; tudo "${tudo_v_args[@]}" -s --work-dir="./work_dir.$TUDO_TESTS_TEMP_DIRECTORY_SUFFIX" 'pwd' 2>&1)"
	return_value=$?
	validate_tudo_test 0 $return_value "$output" "$tudo_test_temp_work_dir"

	run_tudo_test 24 && \
	output="$(cd "$TUDO_TESTS_WORKING_DIR"; tudo "${tudo_v_args[@]}" -s --work-dir="work_dir.$TUDO_TESTS_TEMP_DIRECTORY_SUFFIX" 'pwd' 2>&1)"
	return_value=$?
	validate_tudo_test 0 $return_value "$output" "$tudo_test_temp_work_dir"





	#redirect stderr to stdout, same as `--script-redirect=0`
	close_stdin
	run_tudo_test 25 && \
	tudo_tests_run_subshell_command stdout stderr tudo "${tudo_v_args[@]}" -so --shell="$shell" 'echo stdout; echo stderr 1>&2'
	return_value=$?
	reopen_stdin
	validate_tudo_test 0 $return_value "$stdout" "stdout"$'\n'"stderr"
	validate_tudo_test 0 $return_value "$stderr" ""

	#redirect stdout to stderr, same as `--script-redirect=1`
	close_stdin
	run_tudo_test 26 && \
	tudo_tests_run_subshell_command stdout stderr tudo "${tudo_v_args[@]}" -sO --shell="$shell" 'echo stdout; echo stderr 1>&2'
	return_value=$?
	reopen_stdin
	validate_tudo_test 0 $return_value "$stdout" ""
	validate_tudo_test 0 $return_value "$stderr" "stdout"$'\n'"stderr"

	#redirect redirect stdout to /dev/null
	close_stdin
	run_tudo_test 27 && \
	tudo_tests_run_subshell_command stdout stderr tudo "${tudo_v_args[@]}" -s --script-redirect=2 --shell="$shell" 'echo stdout; echo stderr 1>&2'
	return_value=$?
	reopen_stdin
	validate_tudo_test 0 $return_value "$stdout" ""
	validate_tudo_test 0 $return_value "$stderr" "stderr"

	#redirect stderr to /dev/null for core_script, same as `--script-redirect=3`
	close_stdin
	run_tudo_test 28 && \
	tudo_tests_run_subshell_command stdout stderr tudo "${tudo_v_args[@]}" -sn --shell="$shell" 'echo stdout; echo stderr 1>&2'
	return_value=$?
	reopen_stdin
	validate_tudo_test 0 $return_value "$stdout" "stdout"
	validate_tudo_test 0 $return_value "$stderr" ""

	#redirect both stdout and stderr to /dev/null, same as `--script-redirect=4`
	close_stdin
	run_tudo_test 29 && \
	tudo_tests_run_subshell_command stdout stderr tudo "${tudo_v_args[@]}" -sN --shell="$shell" 'echo stdout; echo stderr 1>&2'
	return_value=$?
	reopen_stdin
	validate_tudo_test 0 $return_value "$stdout" ""
	validate_tudo_test 0 $return_value "$stderr" ""

	#redirect stderr to stdout and redirect stdout to stderr
	close_stdin
	run_tudo_test 30 && \
	tudo_tests_run_subshell_command stdout stderr tudo "${tudo_v_args[@]}" -s --script-redirect=5 --shell="$shell" 'echo stdout; echo stderr 1>&2'
	return_value=$?
	reopen_stdin
	validate_tudo_test 0 $return_value "$stdout" "stderr"
	validate_tudo_test 0 $return_value "$stderr" "stdout"

	#redirect stderr to stdout and redirect stdout to /dev/null
	close_stdin
	run_tudo_test 31 && \
	tudo_tests_run_subshell_command stdout stderr tudo "${tudo_v_args[@]}" -s --script-redirect=6 --shell="$shell" 'echo stdout; echo stderr 1>&2'
	return_value=$?
	reopen_stdin
	validate_tudo_test 0 $return_value "$stdout" "stderr"
	validate_tudo_test 0 $return_value "$stderr" ""



	close_stdin
	run_tudo_test 32 && \
	tudo_tests_run_subshell_command stdout stderr tudo "${tudo_v_args[@]}" -sie --post-shell-stdin-string='exit' --shell="$shell" <(cat <<'TUDO_EOF'
#if parameter count is not 2
if [ $# -ne 2 ]; then
    echo "Invalid parameter count '$#' to 'termux_tasker_basic_bash_test'" 1>&2
    echo "$*" 1>&2
    exit 1
fi

echo "\$1=\`$1\`"
echo "\$2=\`$2\`"

exit 0
TUDO_EOF
) "$shell"
	return_value=$?
	reopen_stdin
	validate_tudo_test 1 $return_value "$stdout" ""
	validate_tudo_test 1 $return_value "$stderr" "Invalid parameter count '1' to 'termux_tasker_basic_bash_test'"$'\n'"$shell"





	run_tudo_test 33 && \
	output="$(tudo "${tudo_v_args[@]}" -s --shell=bas 'echo "Hi, $1 $2."' "$shell" "shell" 2>&1)"
	validate_tudo_test 1 $? "$output" "" "The TUDO_SHELL \"bas\" is not supported. It must be one of" "*"



	run_tudo_test 34 && \
	output="$(tudo "${tudo_v_args[@]}" -si --post-shell=bas 'echo "Hi, $1 $2."' "$shell" "shell" 2>&1)"
	validate_tudo_test 1 $? "$output" "" "The TUDO_POST_SHELL \"bas\" is not supported. It must be one of" "*"



	run_tudo_test 35 && \
	output="$(tudo "${tudo_v_args[@]}" -s --shell-home='~/.config' 'echo "Hi, $1 $2."' "$shell" "shell" 2>&1)"
	validate_tudo_test 1 $? "$output" "" "The \"$TERMUX_HOME/.config\" cannot be used as TUDO_SHELL_HOME" "*"



	run_tudo_test 36 && \
	output="$(tudo "${tudo_v_args[@]}" -s --shell-home='$PREFIX/' 'echo "Hi, $1 $2."' "$shell" "shell" 2>&1)"
	validate_tudo_test 1 $? "$output" "" "The \"$TERMUX_PREFIX\" cannot be used as TUDO_SHELL_HOME" "*"



	run_tudo_test 37 && \
	output="$(tudo "${tudo_v_args[@]}" -s --shell-home='$PREFIX/home' 'echo "Hi, $1 $2."' "$shell" "shell" 2>&1)"
	validate_tudo_test 1 $? "$output" "" "The \"$TERMUX_PREFIX/home\" cannot be used as TUDO_SHELL_HOME" "*"



	run_tudo_test 38 && \
	output="$(tudo "${tudo_v_args[@]}" -s --shell-home='/data' 'echo "Hi, $1 $2."' "$shell" "shell" 2>&1)"
	validate_tudo_test 1 $? "$output" "" "The TUDO_SHELL_HOME \"/data\" must be an absolute path under TERMUX_FILES \"$TERMUX_FILES\"" "*"



	run_tudo_test 39 && \
	output="$(tudo "${tudo_v_args[@]}" -si --post-shell-home='~/.config' 'echo "Hi, $1 $2."' "$shell" "shell" 2>&1)"
	validate_tudo_test 1 $? "$output" "" "The \"$TERMUX_HOME/.config\" cannot be used as TUDO_POST_SHELL_HOME" "*"



	run_tudo_test 40 && \
	output="$(tudo "${tudo_v_args[@]}" -si --post-shell-home='$PREFIX/' 'echo "Hi, $1 $2."' "$shell" "shell" 2>&1)"
	validate_tudo_test 1 $? "$output" "" "The \"$TERMUX_PREFIX\" cannot be used as TUDO_POST_SHELL_HOME" "*"



	run_tudo_test 41 && \
	output="$(tudo "${tudo_v_args[@]}" -si --post-shell-home='$PREFIX/home' 'echo "Hi, $1 $2."' "$shell" "shell" 2>&1)"
	validate_tudo_test 1 $? "$output" "" "The \"$TERMUX_PREFIX/home\" cannot be used as TUDO_POST_SHELL_HOME" "*"



	run_tudo_test 42 && \
	output="$(tudo "${tudo_v_args[@]}" -si --post-shell-home='/data' 'echo "Hi, $1 $2."' "$shell" "shell" 2>&1)"
	validate_tudo_test 1 $? "$output" "" "The TUDO_POST_SHELL_HOME \"/data\" must be an absolute path under TERMUX_FILES \"$TERMUX_FILES\"" "*"





	run_tudo_test 43 && \
	output="$(tudo "${tudo_v_args[@]}" -sr "[[ \",\" == \"$COMMA_ALTERNATIVE\" ]] && [[ "\$1" == \"$COMMA_ALTERNATIVE\" ]] && echo \"arg1 equals simple comma\"" "$COMMA_ALTERNATIVE")"
	validate_tudo_test 0 $? "$output" "arg1 equals simple comma"



	run_tudo_test 44 && \
	output="$(tudo "${tudo_v_args[@]}" -si --post-shell="python" --post-shell-stdin-string='exit(0)' 2>&1)"
	validate_tudo_test 0 $? "$output" "*" "Python" "*"





	### Run zsh tests
	if [ -x "$TERMUX_PREFIX/bin/zsh" ]; then

		set_tudo_tests_current_test_shell "zsh"
		shell="zsh"


		run_tudo_test 1 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" 'readlink -f /proc/$$/exe')"
		validate_tudo_test 0 $? "$output" "$TERMUX_PREFIX/bin/zsh"



		run_tudo_test 2 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" <(cat <<'TUDO_EOF'
echo "Hi, $1 $2."
TUDO_EOF
) "$shell" "shell"
		)"
		validate_tudo_test 0 $? "$output" "Hi, $shell shell."



		run_tudo_test 3 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" --shell-stdin-string="$shell" <(cat <<'TUDO_EOF'
echo "What is your name?"
read name
echo "Hi, $name."
TUDO_EOF
)
		)"
		validate_tudo_test 0 $? "$output" "What is your name?"$'\n'"Hi, $shell."

	else
		tudo_tests_log 1 "Skipping zsh tests since its not installed"
	fi





	### Run dash tests
	if [ -x "$TERMUX_PREFIX/bin/dash" ]; then

		set_tudo_tests_current_test_shell "dash"
		shell="dash"


		run_tudo_test 1 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" <(cat <<'TUDO_EOF'
echo "Hi, $1 $2."
TUDO_EOF
) "$shell" "shell"
		)"
		validate_tudo_test 0 $? "$output" "Hi, $shell shell."



		run_tudo_test 2 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" --shell-stdin-string="$shell" <(cat <<'TUDO_EOF'
echo "What is your name?"
read name
echo "Hi, $name."
TUDO_EOF
)
		)"
		validate_tudo_test 0 $? "$output" "What is your name?"$'\n'"Hi, $shell."

	else
		tudo_tests_log 1 "Skipping dash tests since its not installed"
	fi





	### Run sh tests
	if [ -x "$TERMUX_PREFIX/bin/sh" ]; then

		set_tudo_tests_current_test_shell "sh"
		shell="sh"


		run_tudo_test 1 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" <(cat <<'TUDO_EOF'
echo "Hi, $1 $2."
TUDO_EOF
) "$shell" "shell"
		)"
		validate_tudo_test 0 $? "$output" "Hi, $shell shell."



		run_tudo_test 2 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" --shell-stdin-string="$shell" <(cat <<'TUDO_EOF'
echo "What is your name?"
read name
echo "Hi, $name."
TUDO_EOF
)
		)"
		validate_tudo_test 0 $? "$output" "What is your name?"$'\n'"Hi, $shell."

	else
		tudo_tests_log 1 "Skipping sh tests since its not installed"
	fi





	### Run fish tests
	if [ -x "$TERMUX_PREFIX/bin/fish" ]; then

		set_tudo_tests_current_test_shell "fish"
		shell="fish"

		run_tudo_test 1 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" 'readlink -f /proc/$fish_pid/exe')"
		validate_tudo_test 0 $? "$output" "$TERMUX_PREFIX/bin/fish"


		run_tudo_test 2 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" <(cat <<'TUDO_EOF'
echo "Hi, $argv[1] $argv[2]."
TUDO_EOF
) "$shell" "shell"
		)"
		validate_tudo_test 0 $? "$output" "Hi, $shell shell."



		run_tudo_test 3 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" --shell-stdin-string="$shell" <(cat <<'TUDO_EOF'
echo "What is your name?"
read -p "" name
echo "Hi, $name."
TUDO_EOF
)
		)"
		validate_tudo_test 0 $? "$output" "What is your name?"$'\n'"Hi, $shell."

	else
		tudo_tests_log 1 "Skipping fish tests since its not installed"
	fi





	### Run python tests
	if [ -x "$TERMUX_PREFIX/bin/python" ]; then

		set_tudo_tests_current_test_shell "python"
		shell="python"


		run_tudo_test 1 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" <(cat <<'TUDO_EOF'
import sys
print("Hi, %s %s." % (sys.argv[1], sys.argv[2]))
TUDO_EOF
) "$shell" "shell"
		)"
		validate_tudo_test 0 $? "$output" "Hi, $shell shell."



		run_tudo_test 2 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" --shell-stdin-string="$shell" <(cat <<'TUDO_EOF'
name = input("What is your name?\n")
print("Hi, %s." % name)
TUDO_EOF
)
		)"
		validate_tudo_test 0 $? "$output" "What is your name?"$'\n'"Hi, $shell."


		if [ -x "$TERMUX_HOME/.termux/tasker/termux_tasker_basic_python_test" ]; then
			run_tudo_test 3 && \
			output="$(tudo "${tudo_v_args[@]}" '~/.termux/tasker/termux_tasker_basic_python_test' "$shell" "shell")"
			validate_tudo_test 0 $? "$output" "\$1=\`$shell\`"$'\n'"\$2=\`shell\`"
		else
			skip_tudo_test 3
		fi

		if [ -x "$TERMUX_PREFIX/bin/youtube-dl" ]; then
			run_tudo_test 4 && \
			output="$(tudo "${tudo_v_args[@]}" -s --shell=python --script-name="youtube-dl" <(cat "$TERMUX_PREFIX/bin/youtube-dl") --help 1>/dev/null)"
			validate_tudo_test 0 $? "$output"
		else
			skip_tudo_test 4
		fi

		if [ -x "$TERMUX_PREFIX/bin/youtube-dl" ]; then
			run_tudo_test 5 && \
			output="$(tudo "${tudo_v_args[@]}" -sF --shell=python "$TERMUX_PREFIX/bin/youtube-dl" --help 1>/dev/null)"
			validate_tudo_test 0 $? "$output"
		else
			skip_tudo_test 5
		fi

		if [ -x "$TERMUX_PREFIX/bin/bandcamp-dl" ]; then
			run_tudo_test 6 && \
			output="$(tudo "${tudo_v_args[@]}" -s --shell=python "$(cat "$TERMUX_PREFIX/bin/bandcamp-dl")" --help)"
			validate_tudo_test 0 $? "$output"
		else
			skip_tudo_test 6
		fi

		if [ -x "$TERMUX_PREFIX/bin/bandcamp-dl" ]; then
			run_tudo_test 7 && \
			output="$(tudo "${tudo_v_args[@]}" -s --script-decode --shell=python "$(cat "$TERMUX_PREFIX/bin/bandcamp-dl" | base64)" --help)"
			validate_tudo_test 0 $? "$output"
		else
			skip_tudo_test 7
		fi

	else
		tudo_tests_log 1 "Skipping python tests since its not installed"
	fi





	### Run ruby tests
	if [ -x "$TERMUX_PREFIX/bin/ruby" ]; then

		set_tudo_tests_current_test_shell "ruby"
		shell="ruby"


		run_tudo_test 1 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" <(cat <<'TUDO_EOF'
puts "Hi, " + ARGV[0] + " " + ARGV[1] + "."
TUDO_EOF
) "$shell" "shell"
		)"
		validate_tudo_test 0 $? "$output" "Hi, $shell shell."



		run_tudo_test 2 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" --shell-stdin-string="$shell" <(cat <<'TUDO_EOF'
puts "What is your name?"
name = STDIN.gets
name = '' if name.nil?
puts "Hi, " + name.chomp.to_s + "."
TUDO_EOF
)
		)"
		validate_tudo_test 0 $? "$output" "What is your name?"$'\n'"Hi, $shell."

	else
		tudo_tests_log 1 "Skipping ruby tests since its not installed"
	fi





	### Run node tests
	if [ -x "$TERMUX_PREFIX/bin/node" ]; then

		set_tudo_tests_current_test_shell "node"
		shell="node"


		run_tudo_test 1 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" <(cat <<'TUDO_EOF'
console.log(`Hi, ${process.argv[2]} ${process.argv[3]}.`)
TUDO_EOF
) "$shell" "shell"
		)"
		validate_tudo_test 0 $? "$output" "Hi, $shell shell."



		run_tudo_test 2 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" --shell-stdin-string="$shell" <(cat <<'TUDO_EOF'
const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
})

readline.question(`What is your name?\n`, (name) => {
    console.log(`Hi, ${name}.`)
    readline.close()
})
TUDO_EOF
)
		)"
		validate_tudo_test 0 $? "$output" "*" "Hi, $shell." ""

	else
		tudo_tests_log 1 "Skipping node tests since its not installed"
	fi





	### Run perl tests
	if [ -x "$TERMUX_PREFIX/bin/perl" ]; then

		set_tudo_tests_current_test_shell "perl"
		shell="perl"


		run_tudo_test 1 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" <(cat <<'TUDO_EOF'
print "Hi, ", $ARGV[0], " ", $ARGV[1], ".\n";
TUDO_EOF
) "$shell" "shell"
		)"
		validate_tudo_test 0 $? "$output" "Hi, $shell shell."



		run_tudo_test 2 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" --shell-stdin-string="$shell" <(cat <<'TUDO_EOF'
print "What is your name?\n";
$name = <STDIN>;
chomp($name);
print "Hi, ", $name, ".\n";
TUDO_EOF
)
		)"
		validate_tudo_test 0 $? "$output" "What is your name?"$'\n'"Hi, $shell."

	else
		tudo_tests_log 1 "Skipping perl tests since its not installed"
	fi





	### Run lua5.2 tests
	if [ -x "$TERMUX_PREFIX/bin/lua5.2" ]; then

		set_tudo_tests_current_test_shell "lua5.2"
		shell="lua5.2"


		run_tudo_test 1 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" <(cat <<'TUDO_EOF'
io.write('Hi, ', arg[1], ' ', arg[2], '.\n')
TUDO_EOF
) "$shell" "shell"
		)"
		validate_tudo_test 0 $? "$output" "Hi, $shell shell."



		run_tudo_test 2 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" --shell-stdin-string="$shell" <(cat <<'TUDO_EOF'
io.write('What is your name?\n')
local name = io.read()
io.write('Hi, ', name, '.\n')
TUDO_EOF
)
		)"
		validate_tudo_test 0 $? "$output" "What is your name?"$'\n'"Hi, $shell."

	else
		tudo_tests_log 1 "Skipping lua5.2 tests since its not installed"
	fi





	### Run lua5.3 tests
	if [ -x "$TERMUX_PREFIX/bin/lua5.3" ]; then

		set_tudo_tests_current_test_shell "lua5.3"
		shell="lua5.3"


		run_tudo_test 1 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" <(cat <<'TUDO_EOF'
io.write('Hi, ', arg[1], ' ', arg[2], '.\n')
TUDO_EOF
) "$shell" "shell"
		)"
		validate_tudo_test 0 $? "$output" "Hi, $shell shell."



		run_tudo_test 2 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" --shell-stdin-string="$shell" <(cat <<'TUDO_EOF'
io.write('What is your name?\n')
local name = io.read()
io.write('Hi, ', name, '.\n')
TUDO_EOF
)
		)"
		validate_tudo_test 0 $? "$output" "What is your name?"$'\n'"Hi, $shell."

	else
		tudo_tests_log 1 "Skipping lua5.3 tests since its not installed"
	fi





	### Run lua5.4 tests
	if [ -x "$TERMUX_PREFIX/bin/lua5.4" ]; then

		set_tudo_tests_current_test_shell "lua5.4"
		shell="lua5.4"


		run_tudo_test 1 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" <(cat <<'TUDO_EOF'
io.write('Hi, ', arg[1], ' ', arg[2], '.\n')
TUDO_EOF
) "$shell" "shell"
		)"
		validate_tudo_test 0 $? "$output" "Hi, $shell shell."



		run_tudo_test 1 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" --shell-stdin-string="$shell" <(cat <<'TUDO_EOF'
io.write('What is your name?\n')
local name = io.read()
io.write('Hi, ', name, '.\n')
TUDO_EOF
)
		)"
		validate_tudo_test 0 $? "$output" "What is your name?"$'\n'"Hi, $shell."

	else
		tudo_tests_log 1 "Skipping lua5.4 tests since its not installed"
	fi





	### Run php tests
	if [ -x "$TERMUX_PREFIX/bin/php" ]; then

		set_tudo_tests_current_test_shell "php"
		shell="php"


		run_tudo_test 1 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" <(cat <<'TUDO_EOF'
<?php
echo "Hi, " . $argv[1] . " " . $argv[2] . ".\n";
TUDO_EOF
) "$shell" "shell"
		)"
		validate_tudo_test 0 $? "$output" "Hi, $shell shell."



		run_tudo_test 2 && \
		output="$(tudo "${tudo_v_args[@]}" -s --shell="$shell" --shell-stdin-string="$shell" <(cat <<'TUDO_EOF'
<?php
echo "What is your name?\n";
$name = readline();
echo "Hi, " . $name . ".\n";
TUDO_EOF
)
		)"
		validate_tudo_test 0 $? "$output" "What is your name?"$'\n'"php"$'\n'"Hi, $shell."

	else
		tudo_tests_log 1 "Skipping php tests since its not installed"
	fi



	tudo_tests_log 0 $'\n\n'"All 'script' command type tests successful"

	return 0

}

#capture stdout and stderr of command in separate variables
#tudo_tests_run_subshell_command stdout_variable_name stderr_variable_name command [arguments]
tudo_tests_run_subshell_command() {

	local return_value

	local stdout_variable_name="$1";
	local stderr_variable_name="$2"
	shift 2

	local valid_bash_variable_name_regex='^[a-zA-Z][a-zA-Z0-9_]*(\[[0-9]+\])?$'

	#if stdout_variable_name does equals "stdout_variable_name" and or is not a valid bash variable_name
	if [[ "$stdout_variable_name" == "stdout_variable_name" ]]|| [[ ! "$stdout_variable_name" =~ $valid_bash_variable_name_regex ]]; then
		tudo_tests_log_errors "stdout_variable_name \"$1\" passed to \"tudo_tests_run_subshell_command\" equals \"stdout_variable_name\" or is not a valid bash variable name"
		return 1
	fi

	#if stderr_variable_name does equals "stderr_variable_name" and or is not a valid bash variable_name
	if [[ "$stderr_variable_name" == "stderr_variable_name" ]]|| [[ ! "$stderr_variable_name" =~ $valid_bash_variable_name_regex ]]; then
		tudo_tests_log_errors "stderr_variable_name \"$1\" passed to \"tudo_tests_run_subshell_command\" equals \"stderr_variable_name\" or is not a valid bash variable name"
		return 1
	fi

	unset "$stdout_variable_name"
	unset "$stderr_variable_name"

	#credits madmurphy https://stackoverflow.com/a/59592881/14686958

	#some_command is launched

	#we then have some_command's stdout on the descriptor 1,
	#some_command's stderr on the descriptor 2 and
	#some_command's exit code redirected to the descriptor 3

	#stdout is piped to tr (sanitization) to remove NUL

	#stderr is swapped with stdout (using temporarily the descriptor 4) and piped to tr (sanitization)

	#the exit code (descriptor 3) is swapped with stderr (now descriptor 1) and piped to exit $(cat)

	#stderr (now descriptor 3) is redirected to the descriptor 1, end expanded as the second argument of printf

	#the exit code of exit $(cat) is captured by the third argument of printf

	#the output of printf is redirected to the descriptor 2, where stdout was already present

	#the concatenation of stdout and the output of printf is piped to read

	{
		IFS=$'\n' read -r -d '' "$stdout_variable_name";
		IFS=$'\n' read -r -d '' "$stderr_variable_name";
		(IFS=$'\n' read -r -d '' return_value; return $return_value);
	} < <((printf '\0%s\0%d\0' "$(((({ "$@"; echo "$?" 1>&3-; } | tr -d '\0' 1>&4-) 4>&2- 2>&1- | tr -d '\0' 1>&4-) 3>&1- | exit "$(cat)") 4>&1-)" "$?" 1>&2) 2>&1)

}

set_tudo_tests_current_test_shell () {

	tudo_tests_previous_temp_test_shell="$tudo_tests_current_test_shell";
	tudo_tests_current_test_shell="$1"

}

set_tudo_tests_current_test_number () {

	#to handle the case when tudo_tests_user_test_number was the last test of a shell
	if [[ ! -z "$tudo_tests_previous_temp_test_shell" ]]; then
		tudo_tests_previous_test_shell="$tudo_tests_previous_temp_test_shell"
		tudo_tests_previous_temp_test_shell=""
	else
		tudo_tests_previous_test_shell="$tudo_tests_current_test_shell"
	fi

	tudo_tests_previous_test_number="$tudo_tests_current_test_number";
	tudo_tests_current_test_number="$1";

	#if tudo_tests_user_test_shell and tudo_tests_user_test_number are set
	#and
	#tudo_tests_previous_test_shell equals tudo_tests_user_test_shell
	#and
	#tudo_tests_previous_test_number equals tudo_tests_user_test_number
	#then exit
	if [ ! -z "$tudo_tests_user_test_shell" ] && [ ! -z "$tudo_tests_user_test_number" ] && \
			[[ "$tudo_tests_previous_test_shell" == "$tudo_tests_user_test_shell" ]] && \
				[[ "$tudo_tests_previous_test_number" == "$tudo_tests_user_test_number" ]]; then
		$tudo_tests_exit_command 0
	fi

	#if tudo_tests_user_test_shell and tudo_tests_user_test_number are set
	#and
	#tudo_tests_current_test_shell does not equal tudo_tests_user_test_shell
	#     or
	#tudo_tests_current_test_number does not equal tudo_tests_user_test_number
	#then skip the current test
	if [ ! -z "$tudo_tests_user_test_shell" ] && [ ! -z "$tudo_tests_user_test_number" ] && \
			([[ "$tudo_tests_current_test_shell" != "$tudo_tests_user_test_shell" ]] || \
				[[ "$tudo_tests_current_test_number" != "$tudo_tests_user_test_number" ]]); then
		return 112
	else
		tudo_tests_run_test=1
		return 0
	fi

}

#run_tudo_test current_test_number
run_tudo_test () {

	set_tudo_tests_current_test_number "$1" || return $?
	tudo_tests_log 1 $'\n\n'"Running $tudo_tests_current_test_shell shell test $tudo_tests_current_test_number";

}

#skip_tudo_test current_test_number
skip_tudo_test () {

	set_tudo_tests_current_test_number "$1" || return $?
	tudo_tests_log 1 $'\n\n'"Skipping $tudo_tests_current_test_shell shell test $tudo_tests_current_test_number";

}

#validate_tudo_test expected_result_value actual_result_value actual_output expected_output
#validate_tudo_test expected_result_value actual_result_value actual_output expected_output_prefix_glob expected_output expected_output_suffix_glob
validate_tudo_test () {

	local return_value

	if [[ "$tudo_tests_run_test" != "1" ]]; then
		return 0
	fi

	local expected_result_value="$1"
	local actual_result_value="$2"

	#remove all escape sequences and strip all characters except tab(11), linefeed(12) and characters in range 40-176
	local actual_output="$(sed 's/\x1b\[[0-9;]*[a-zA-Z]//g' <<< "$3" | tr -cd '\11\12\40-\176')"

	local expected_output
	local output_match_test_failed=0

	#if actual_output is set
	if [ ! -z "$actual_output" ]; then
		cat -v <<<"$actual_output"
	fi

	#if parameter count equals 4 and actual_output does not exactly match $4
	if [ $# -eq 4 ] && [[  "$actual_output" != "$4" ]]; then
		output_match_test_failed=1
		expected_output="$4"
	fi

	#if parameter count greater than 4 and actual_output does not exactly match $5 with $4 and $6 as optional globs
	if [ $# -gt 4 ] && [[  "$actual_output" != $4"$5"$6 ]]; then
		output_match_test_failed=1
		expected_output="$4$5$6"
	fi

	#if output_match_test_failed is enabled
	if [[  "$output_match_test_failed" == "1" ]]; then
		tudo_tests_log_errors $'\n'"$tudo_tests_current_test_shell shell test $tudo_tests_current_test_number for '$tudo_tests_command_type' command type failed since expected_output does not match actual_output"
		tudo_tests_log_errors $'\n'"expected_output=\`$expected_output\`"
		tudo_tests_log_errors $'\n'"actual_output=\`$actual_output\`"
		$tudo_tests_exit_command 1
	fi

	#if actual_result_value is not a valid exit code
	if [[ ! "$actual_result_value" =~ $valid_number_regex ]]; then
		tudo_tests_log_errors $'\n'"$tudo_tests_current_test_shell shell test $tudo_tests_current_test_number for '$tudo_tests_command_type' command type exit code '$actual_result_value' is invalid"
		$tudo_tests_exit_command 1
	fi

	#if expected_result_value is not a valid exit code
	if [[ ! "$expected_result_value" =~ $valid_number_regex ]]; then
		tudo_tests_log_errors $'\n'"$tudo_tests_current_test_shell shell test $tudo_tests_current_test_number for '$tudo_tests_command_type' command type exit code '$expected_result_value' is invalid"
		$tudo_tests_exit_command 1
	fi

	#if actual_result_value does not equal expected_result_value
	if [[ "$actual_result_value" != "$expected_result_value" ]]; then
		tudo_tests_log_errors $'\n'"$tudo_tests_current_test_shell shell test $tudo_tests_current_test_number for '$tudo_tests_command_type' command type failed with exit code $actual_result_value but expected exit code was $expected_result_value"
		$tudo_tests_exit_command "$actual_result_value"
	fi

	tudo_tests_log 1 $'\n'"Test successful";

	return 0

}

tudo_tests_cleanup() {

	#the tudo_tests_cleanup will do the following:
	#remove the EXIT trap so its not called again
	#remove temp_directory if set
	#if a signal argument was passed, then remove its trap and
	#then exit with the same signal
	#so that parent processes can be notified if necessary

	local tudo_tests_exit_code=$?
	trap - EXIT
	tudo_tests_remove_tudo_tests_temp_directories
	[ -n "$1" ] && trap - $1; exit $tudo_tests_exit_code;

}

tudo_tests_remove_tudo_tests_temp_directories() {

	#if TUDO_TESTS_DIRECTORIES and TUDO_TESTS_TEMP_DIRECTORY_SUFFIX are set
	if [ ${#TUDO_TESTS_DIRECTORIES[@]} -ne 0 ] && [ ! -z "$TUDO_TESTS_TEMP_DIRECTORY_SUFFIX" ]; then

		tudo_tests_log 2 $'\n\n'"Running tudo_tests_remove_tudo_tests_temp_directories"

		#remove all directories in TUDO_TESTS_DIRECTORIES if they match the TUDO_TESTS_TEMP_DIRECTORY_SUFFIX
		for i in "${!TUDO_TESTS_DIRECTORIES[@]}"; do
			if [[ "${TUDO_TESTS_DIRECTORIES[$i]}" == *"$TUDO_TESTS_TEMP_DIRECTORY_SUFFIX" ]]; then
				[ -d "${TUDO_TESTS_DIRECTORIES[$i]}" ] && rm -rf "${TUDO_TESTS_DIRECTORIES[$i]}"
			fi
		done

	fi

	return 0

}

process_tudo_tests_parameters() {

	#parse options to tudo_tests command
	while getopts ":hv-:" opt; do
		case ${opt} in
			-)
				long_optargs="${OPTARG#*=}"
				case "${OPTARG}" in
					help-extra)
						tudo_tests_log_args "Parsing option: '--${OPTARG%=*}'"
						show_tudo_tests_help_extra
						$tudo_tests_exit_command 0
						;;
					help-extra*)
						tudo_tests_log_arg_errors "Invalid option or parameters not allowed for option: '--${OPTARG%=*}'"
						exit_tudo_tests_on_error
						;;
					help)
						tudo_tests_log_args "Parsing option: '--${OPTARG%=*}'"
						show_tudo_tests_help
						$tudo_tests_exit_command 0
						;;
					help*)
						tudo_tests_log_arg_errors "Invalid option or parameters not allowed for option: '--${OPTARG%=*}'"
						exit_tudo_tests_on_error
						;;
					'' ) #"--" terminates argument processing to support non-options that start with dashes
						tudo_tests_log_args "Parsing option: '--'"
						break
						;;
					*)
						tudo_tests_log_arg_errors "Unknown option '--${OPTARG%=*}'"
						exit_tudo_tests_on_error
						;;
				esac
				;;
			h)
				tudo_tests_log_args "Parsing option: '-${opt}'"
				show_tudo_tests_help
				$tudo_tests_exit_command 0
				;;
			v)
				tudo_tests_log_args "Parsing option: '-${opt}'"
				#tudo_verbose_level would have been sourced from the tudo script
				if [ "$tudo_verbose_level" -lt "2" ]; then
					tudo_verbose_level=$((tudo_verbose_level+1));
					tudo_v_args+=("-v")
				else
					tudo_tests_log_arg_errors "Invalid Option, max verbose level is 2"
					exit_tudo_tests_on_error
				fi
				;;
			\?)
				tudo_tests_log_arg_errors "Unknown option: '-${OPTARG}'"
				exit_tudo_tests_on_error
				;;
		esac
	done
	shift $((OPTIND -1)) #remove already processed arguments from argument list

	tudo_tests_command_type="$1"
	tudo_tests_user_test_shell="$2"
	tudo_tests_user_test_number="$3"

}

show_tudo_tests_help() {

	cat<<<"$TUDO_TESTS_HELP"

}

show_tudo_tests_help_extra() {

	show_tudo_tests_help

	cat<<<"$TUDO_TESTS_HELP_EXTRA"

}

exit_tudo_tests_on_error() {

	show_tudo_tests_help
	$tudo_tests_exit_command 1

}

#call tudo_tests_main function
[[ x"${BASH_SOURCE[0]}" == x"$0" ]] && tudo_tests_main "$@"; $tudo_tests_exit_command 0;
